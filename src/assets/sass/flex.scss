/* 弹性盒子 */
.fb {
  @include fb;
}
/* 行内弹性盒子 */
.fb-line {
  @include fb-line;
}

/* 弹性盒子主轴方向设置 */
/* 弹性盒子主轴方向：横向(左->右排列) */
.fb-row {
  @include fb-row;
}
/* 弹性盒子主轴方向：横向(右->左排列) */
.fb-row-rev {
  @include fb-row-rev;
}
/* 弹性盒子主轴方向：纵向(上->下排列) */
.fb-col {
  @include fb-col;
}
/* 弹性盒子主轴方向：纵向(下->上排列) */
.fb-col-rev {
  @include fb-col-rev;
}

/* 弹性盒子溢出换行方式设置 */
/* 溢出不换行(默认值) */
.fb-nowrap {
  @include fb-wrap-type(nowrap);
}
/* 溢出换行 */
.fb-wrap {
  @include fb-wrap-type(wrap);
}
/* 溢出换行(反转 wrap 排列) */
.fb-wrap-rev {
  @include fb-wrap-type(wrap-reverse);
}

/* 主轴对齐方式设置 */
/* 沿主轴方向头部对齐 */
.fb-main-start {
  @include fb-main-justify-content(flex-start);
}
/* 沿主轴方向中间对齐 */
.fb-main-center {
  @include fb-main-justify-content(center);
}
/* 沿主轴方向尾部对齐 */
.fb-main-end {
  @include fb-main-justify-content(flex-end);
}
/* 沿主轴方向两端对齐，项目之间的间隔都相等 */
.fb-main-between {
  @include fb-main-justify-content(space-between);
}
/* 沿主轴方向平均分布 */
.fb-main-around {
  @include fb-main-justify-content(space-around);
}

/* 交叉轴(侧轴)对齐方式设置 */
/* 沿侧轴方向头部对齐 */
.fb-cross-start {
  @include fb-cross-align-items(flex-start);
}
/* 沿侧轴方向中间对齐 */
.fb-cross-center {
  @include fb-cross-align-items(center);
}
/* 沿侧轴方向尾部对齐 */
.fb-cross-end {
  @include fb-cross-align-items(flex-end);
}
/* 沿侧轴方向按每个子元素的第一行文字的基线对齐（仅主轴未横向或者行内弹性盒子时才有效） */
.fb-cross-baseline {
  @include fb-cross-align-items(baseline);
}
/* 如盒子内元素未指定侧轴方向尺寸或者设为auto，则侧轴方向充满整个盒子 */
.fb-cross-stretch {
  @include fb-cross-align-items(stretch);
}

/* 项目排列顺序order。数值越小，排列越靠前，默认为0 */
@for $i from 0 through 20 {
  .item-order-#{$i} {
    @include item-order($i);
  }
}

/* 项目放大比例 flex-grow。默认0(不放大)，放大比例按flex容器除内容外剩余空间的比例计算 */
@for $i from 0 through 20 {
  .item-grow-#{$i} {
    @include item-grow($i);
  }
}

/* 项目的缩小比例 flex-shrink.缩小：默认1（如果空间不足则会缩小，值为0不缩小)*/
@for $i from 0 through 20 {
  .item-shrink-#{$i} {
    @include item-shrink($i);
  }
}

/* flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间 */
@for $i from 0 through 20 {
  .item-basis-#{$i} {
    @include item-basis($i);
  }
  .item-basis-p-#{$i} {
    @include item-basis-p($i);
  }
}

/* 盒子内子元素空间分配flex。是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto */
@for $i from 0 through 20 {
  .item-flex-#{$i} {
    @include item-flex($i);
  }
}

/* 侧轴对齐方式设置(单个项目)
      可覆盖align-items属性。
      默认值为auto，表示继承父元素的align-items属性，
      如果没有父元素，则等同于stretch
*/
.item-self-start {
  @include item-self(flex-start);
}
.item-self-center {
  @include item-self(center);
}
.item-self-end {
  @include item-self(flex-end);
}
.item-self-baseline {
  @include item-self(baseline);
}
.item-self-stretch {
  @include item-self(stretch);
}

/* 主轴/侧轴整合样式 */
$justifyContent: (
  'start': flex-start,
  'center': center,
  'end': flex-end,
  'between': space-between,
  'around': space-around
);

$alignItems: (
  'start': flex-start,
  'center': center,
  'end': flex-end,
  'baseline': baseline,
  'stretch': stretch
);

@each $justifyName, $justifyVal in $justifyContent {
  @each $alignName, $alignVal in $alignItems {
    .fb-#{$justifyName}-#{$alignName} {
      @include fb;
      @include fb-row;
      @include fb-main-justify-content($justifyVal);
      @include fb-cross-align-items($alignVal);
    }
    .fb-rev-#{$justifyName}-#{$alignName} {
      @include fb;
      @include fb-row-rev;
      @include fb-main-justify-content($justifyVal);
      @include fb-cross-align-items($alignVal);
    }
    .fb-col-#{$justifyName}-#{$alignName} {
      @include fb;
      @include fb-col;
      @include fb-main-justify-content($justifyVal);
      @include fb-cross-align-items($alignVal);
    }
    .fb-col-rev-#{$justifyName}-#{$alignName} {
      @include fb;
      @include fb-col-rev;
      @include fb-main-justify-content($justifyVal);
      @include fb-cross-align-items($alignVal);
    }
  }
}
